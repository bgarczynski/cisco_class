#!/usr/bin/env python
'''
Autogenerated code using arya.py
Original Object Document Input: 
{"aaaUser":{"attributes":{"dn":"uni/userext/user-KyleTest","name":"KyleTest","pwd":"test","rn":"user-KyleTest","status":"created"},"children":[{"aaaUserDomain":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all","name":"all","rn":"userdomain-all","status":"created,modified"},"children":[{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-aaa","name":"aaa","privType":"writePriv","rn":"role-aaa","status":"created,modified"},"children":[]}},{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-access-admin","name":"access-admin","privType":"writePriv","rn":"role-access-admin","status":"created,modified"},"children":[]}},{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-admin","name":"admin","privType":"writePriv","rn":"role-admin","status":"created,modified"},"children":[]}},{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-fabric-admin","name":"fabric-admin","privType":"writePriv","rn":"role-fabric-admin","status":"created,modified"},"children":[]}},{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-nw-svc-admin","name":"nw-svc-admin","privType":"writePriv","rn":"role-nw-svc-admin","status":"created,modified"},"children":[]}},{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-ops","name":"ops","privType":"writePriv","rn":"role-ops","status":"created,modified"},"children":[]}},{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-read-all","name":"read-all","privType":"writePriv","rn":"role-read-all","status":"created,modified"},"children":[]}},{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-tenant-admin","name":"tenant-admin","privType":"writePriv","rn":"role-tenant-admin","status":"created,modified"},"children":[]}},{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-tenant-ext-admin","name":"tenant-ext-admin","privType":"writePriv","rn":"role-tenant-ext-admin","status":"created,modified"},"children":[]}},{"aaaUserRole":{"attributes":{"dn":"uni/userext/user-KyleTest/userdomain-all/role-vmm-admin","name":"vmm-admin","privType":"writePriv","rn":"role-vmm-admin","status":"created,modified"},"children":[]}}]}}]}}
'''
# raise RuntimeError('Please review the auto generated code before ' +
#                     'executing the output. Some placeholders will ' +
#                     'need to be changed')

# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.request
import cobra.mit.session
import cobra.model.fv
import cobra.model.pol
import cobra.model.aaa
from cobra.internal.codec.xmlcodec import toXMLStr


def adduser(username,password):
                # log into an APIC and create a directory object
        ls = cobra.mit.session.LoginSession('https://172.31.216.24', 'admin', 'scotch123')
        md = cobra.mit.access.MoDirectory(ls)
        md.login()

                # the top level object on which operations will be made
        polUni = cobra.model.pol.Uni('')
        aaaUserEp = cobra.model.aaa.UserEp(polUni)

                # build the request using cobra syntax
        aaaUser = cobra.model.aaa.User(aaaUserEp, pwd=password, name=username)
        aaaUserDomain = cobra.model.aaa.UserDomain(aaaUser, name=u'all')
        aaaUserRole = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'all')
                # aaaUserRole = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'aaa')
                # aaaUserRole2 = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'access-admin')
                # aaaUserRole3 = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'admin')
                # aaaUserRole4 = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'fabric-admin')
                # aaaUserRole5 = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'nw-svc-admin')
                # aaaUserRole6 = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'ops')
                # aaaUserRole7 = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'read-all')
                # aaaUserRole8 = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'tenant-admin')
                # aaaUserRole9 = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'tenant-ext-admin')
                # aaaUserRole10 = cobra.model.aaa.UserRole(aaaUserDomain, privType=u'writePriv', name=u'vmm-admin')


                # commit the generated code to APIC
        c = cobra.mit.request.ConfigRequest()
        c.addMo(aaaUser)
        md.commit(c)

def addten(tenname):
        ls = cobra.mit.session.LoginSession('https://172.31.216.24', 'admin', 'scotch123')
        md = cobra.mit.access.MoDirectory(ls)
        md.login()

# the top level object on which operations will be made
        polUni = cobra.model.pol.Uni('')

# build the request using cobra syntax
        
        fvTenant = cobra.model.fv.Tenant(polUni, ownerKey=u'', name=tenname, descr=u'', ownerTag=u'')
        fvRsTenantMonPol = cobra.model.fv.RsTenantMonPol(fvTenant, tnMonEPGPolName=u'')


# commit the generated code to APIC
        print toXMLStr(polUni)
        c = cobra.mit.request.ConfigRequest()
        c.addMo(fvTenant)
        md.commit(c)


def main():
        tenname = raw_input('Tenant Name: ')
        username = raw_input('Username: ')
        password = raw_input('Password: ')
        tencall = addten(tenname)
        usrcall = adduser(username,password)


if __name__ == '__main__':
                main()
